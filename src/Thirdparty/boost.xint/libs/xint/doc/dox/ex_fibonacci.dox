/*! \page ex_fibonacci Fibonacci Numbers

Fibonacci numbers are a sequence of numbers, starting with the numbers 0 and 1,
where each successive number is the sum of the previous two. The first few
Fibonacci numbers are:

<code>0 1 1 2 3 5 8 13 21 34 55 89 144...</code>

You might be curious what the first Fibonacci number is that's too big to
calculate using the standard C++ <code>unsigned long</code> type. A brute-force
method of calculating this would be problematic, since it might not be possible
to tell when it overflows. But with the XInt library, it's child's play:

\include fibonacci.cpp

If you're not intimately familiar with the Fibonacci sequence, and how fast the
numbers in it grow, the answer might shock you:

\code
This system supports a 64-bit unsigned long.
Its maximum value is 18446744073709551615.

Searching for the first Fibonacci value that wouldn't fit...
0: 0
1: 1
2: 1
3: 2
4: 3
5: 5
6: 8
7: 13
8: 21
9: 34
10: 55
11: 89
12: 144
13: 233
14: 377
15: 610
16: 987
17: 1597
18: 2584
19: 4181
20: 6765
21: 10946
22: 17711
[...some lines omitted for brevity...]
88: 1100087778366101931
89: 1779979416004714189
90: 2880067194370816120
91: 4660046610375530309
92: 7540113804746346429
93: 12200160415121876738

The answer is 94 (19740274219868223167).
\endcode

As you can see, using the XInt library is just like using the native integer
types -- except that an \c xint::integer won't overflow on you until you
completely exhaust your system's memory. :-)
*/
